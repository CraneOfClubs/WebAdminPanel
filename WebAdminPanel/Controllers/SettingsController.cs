using EmbeddedServer;
using EmbeddedServer.SSEvents;
using EmbeddedServer.Storages;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using WebAdminPanel.ViewModels;

namespace WebAdminPanel.Controllers
{
    public class SettingsController : Controller
    {


        [Authorize]
        public IActionResult Devices()
        {
            
            if (DevModelHandler.deviceModel.Count == 0)
                DevModelHandler.deviceModel = DevModelHandler.GenerateDeviceModel();
            ViewData["Message"] = "Settings general page.";

            return View(DevModelHandler.deviceModel);
        }

        public IActionResult EditName(string deviceName)
        {
            DevModelHandler.deviceModel.Find(x => x.DeviceInfo.Device.Name == deviceName).EditShow = true;
            ViewData["Message"] = "Settings general page.";

            return View("Devices", DevModelHandler.deviceModel);
        }

        public List<ModuleModel> GenerateModuleModel(string deviceName)
        {
            var mModel = new List<ModuleModel>();
            
            foreach (var m in DeviceStorage.GetDeviceByName(deviceName).Modules)
            {
                var buf = new ModuleModel();
                buf.module = m;
                buf.DeviceName = deviceName;
                if (buf.module is Trigger)
                {
                    buf.Type = "Simple Trigger";
                    buf.StrVal = Utility.UnWrapStates((buf.module as Trigger).State);
                }
                if (buf.module is VariadicTrigger)
                {
                    buf.Type = "Variadic Trigger";
                    buf.StrVal = (buf.module as VariadicTrigger).State.ToString();
                }
                if (buf.module is Sensor)
                {
                    buf.Type = (buf.module as Sensor).State.ToString();
                }
                mModel.Add(buf);
                // mModel[0].Module.
            }
            return mModel;
        }

        public IActionResult Details(string deviceName)
        {
            
            DevModelHandler.deviceModel.Find(x => x.DeviceInfo.Device.Name == deviceName).DetailsShow =
                !DevModelHandler.deviceModel.Find(x => x.DeviceInfo.Device.Name == deviceName).DetailsShow;
            ViewData["Message"] = "Modules";

            return View("Modules", GenerateModuleModel(deviceName));
        }

        public IActionResult DeleteDevice(string deviceName)
        {

            var tr = DevModelHandler.deviceModel.Find(x => x.DeviceInfo.Device.Name == deviceName);
            DevModelHandler.deviceModel.Remove(tr);
            DeviceStorage.DeleteDevice(deviceName);
            ViewData["Message"] = "Modules";

            return View("Devices", DevModelHandler.deviceModel);
        }

        public IActionResult ScheduleTimeBased(string deviceName, string moduleName)
        {
            var module = DeviceStorage.GetDeviceByName(deviceName).GetModuleByName(moduleName);
            Random rand = new Random();
            SmSEvent smSEvent = new TimeEvent("AutoGeneratedEvent", module, rand.Next(1, 250));
            var time = DateTime.Now.AddSeconds(5); 
            (smSEvent as TimeEvent).TriggerAt(time);
            Scheduler.AddEvent(smSEvent);
            // DevModelHandler.deviceModel.Find(x => x.DeviceInfo.Device.Name == deviceName).DeviceInfo.Device.ExternalName = "Tesst";
            //var test = Request
            ViewData["Message"] = "Settings general page.";

            return View("Devices", DevModelHandler.deviceModel);
        }

        [HttpPost]
        public IActionResult SaveName(string deviceName, string IP)
        {
            DevModelHandler.deviceModel.Find(x => x.DeviceInfo.Device.Name == deviceName).EditShow = false;
            DeviceStorage.ChangeExternalNameOfDevice(deviceName, IP);
           // DevModelHandler.deviceModel.Find(x => x.DeviceInfo.Device.Name == deviceName).DeviceInfo.Device.ExternalName = "Tesst";
            //var test = Request
            ViewData["Message"] = "Settings general page.";

            return View("Devices", DevModelHandler.deviceModel);
        }

        public IActionResult Register(string deviceName)
        {
            DeviceStorage.RegisterDevice(DeviceStorage.GetDeviceByName(deviceName));
            ViewData["Message"] = "Settings general page.";

            return View("Devices", DevModelHandler.deviceModel);
        }
    }
}
